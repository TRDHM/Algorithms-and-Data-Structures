Script started on Sat 08 Feb 2020 01:00:54 PM EST
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[?1034h[mitchell_dh@cobra Project1]$ cat editor.cpp 
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
#include "linelist.h"
#include <sstream>


namespace fscope{
	ifstream infile; //input file pointer
	string filename; //input filename
}

using namespace fscope; //global directive
using namespace std;
void OpenFile(char *filename, LineList &l);
bool Editor(LineList &l);
void CleanUp(LineList &l, char *filename);


int main(int argc, char *argv[1]){
	if(argv[1] == NULL){
		cout << "Error: No file entered" << endl;
		exit(1);
	}
	char* arg = argv[1];
	LineList l;	
	OpenFile(arg, l);
	l.printList();
	Editor(l);	
	CleanUp(l, arg);
  return 0;
}


void OpenFile(char *filename, LineList &l){
	ifstream infile(filename); 
	string line;
	while (infile){
		getline(infile, line);
		l.insertLine(line); 
	}
	infile.close();
}

bool Editor(LineList &l){
  char arg;
  do{    
 	cout << l.getCurrLineNum() << ">";	
	cin >> arg;
	    
	    if(arg == 'I') {
		string str;
		getline(cin, str);
		l.insertLine(str);
	    }
	    else if(arg == 'D')  {
		l.deleteLine();
	    }
	    else if(arg == 'L')  {
		l.printList();
	    }
	    else if(arg == 'P') {
		l.movePrevLine();
	    }
	    else if(arg == 'N'){
  		l.moveNextLine();
	    }
  }while (arg != 'E');
}

void CleanUp(LineList &l, char *filename){
	string s;
	int i = 1;
	ofstream outfile(filename);
	l.goToTop();
	while (i != l.getLength()){
	  outfile << l.getCurrLine() << endl;
	  i++;
	  l.moveNextLine();
	}	
	outfile.close();
}
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[mitchell_dh@cobra Project1]$ cat linelist.cpp

#include <iostream>
#include "linelist.h"

LineList::LineList()
{
	LineNode *line = new LineNode;
	LineNode *line2 = new LineNode;

	line -> info = topMessage;
	currLine = line;
	currLineNum = 1;
	length = 0;
	line2 -> info = bottomMessage;
	currLine -> back = NULL;
	currLine -> next = line2;
	line2 -> back = line;
	line2 -> next = NULL;
}

void LineList::goToTop() 
{
	// Post : Advances currLine to line 1
	while(currLine -> info != topMessage){
	  currLine = currLine -> back;
	}
        currLine = currLine -> next;
	currLineNum = 1;
}

void LineList::goToBottom() 
{
	// Post : Advances currLine to last line
	while(currLine -> next -> info != bottomMessage){
	  currLine = currLine -> next;
	}
}

void LineList::insertLine(string newLine)
{
	// post : newLine has been inserted after the current line
	if (currLine -> info == bottomMessage){
	  //start out w/ currline pointing to top
	  movePrevLine();
	}	
  //create and fill line pointer
  LineNode *line = new LineNode;
  line -> info = newLine; 
  line -> back = currLine;
  line -> next = currLine -> next;

  //insert line into list
  currLine -> next -> back = line;
  currLine -> next = line;
  //points to new line
  currLine = currLine -> next;

  //handle the private variables of LineNode
  length++;
  currLineNum++;

}

void LineList::deleteLine()
{
	// post : deletes the current line leaving currentLine
	//	  pointing to line following line
	if(currLine == NULL){
	  return;
	}  

	  currLine -> next -> back = currLine -> back;
	  currLine -> back -> next = currLine -> next;
	  currLine = currLine -> back;
}

void LineList::printList() 
{
  //make new LineNode so we don't have to modify the original, then set it to the top of the list
  int LineNum = 1;
  LineNode* pLine = currLine;
  int pLineNum = currLineNum;
  goToTop();

  LineNode *line = currLine;
  //print out until 
  while(line -> info != bottomMessage){
    cout << LineNum << "> " << line -> info << endl;
    line = line -> next;
    LineNum++;
  }
 
  currLine = pLine;
  currLineNum = pLineNum;
 
}

string LineList::getCurrLine() const
{
  return (currLine -> info);   

}

void LineList::moveNextLine()
{
	// Post : Advances currLine (unless already at last line)
  if((currLine -> next != NULL) && (currLine -> info != bottomMessage)){
  	currLine = currLine -> next;
	currLineNum++;
  }
}

void LineList::movePrevLine()
{
	// Post : Advances currLine (unless already at last line)
  if(currLine -> back -> info != topMessage){
    currLine = currLine -> back;
    currLineNum--;
  }
}

int LineList::getCurrLineNum() const
{
  return(currLineNum);

}

int LineList::getLength() const
{
  return(length);
}
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[mitchell_dh@cobra Project1]$ c++ editor.cpp linelist.o
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[mitchell_dh@cobra Project1]$ ./a.out
Error: No file entered
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[mitchell_dh@cobra Project1]$ ./a.out testfile
1> Line 1
2>  New Line
3> 
4> 
5>P
4>P
3>I New Line
4>P
3>D
3>L
1> Line 1
2>  New Line
3> 
4> 
3>N
4>N
5>E
]0;mitchell_dh@cobra:~/csc245/Projects/Project1[mitchell_dh@cobra Project1]$ exit
exit

Script done on Sat 08 Feb 2020 01:01:37 PM EST
